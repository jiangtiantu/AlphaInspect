# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request

import numpy as np  # noqa
import pandas as pd  # noqa
import polars as pl  # noqa
import polars.selectors as cs  # noqa
from loguru import logger  # noqa

# ===================================
# 导入优先级，例如：ts_RSI在ta与talib中都出现了，优先使用ta
# 运行时，后导入覆盖前导入，但IDE智能提示是显示先导入的
_ = 0  # 只要之前出现了语句，之后的import位置不参与调整
# from polars_ta.prefix.talib import *  # noqa
from polars_ta.prefix.tdx import *  # noqa
from polars_ta.prefix.ta import *  # noqa
from polars_ta.prefix.wq import *  # noqa
from polars_ta.prefix.cdl import *  # noqa

# ===================================

_ = (
    r"CLOSE",
    r"HIGH",
    r"LOW",
)
(
    CLOSE,
    HIGH,
    LOW,
) = (pl.col(i) for i in _)

_ = (
    r"_x_0",
    r"ROCP_001",
    r"ROCP_003",
    r"ROCP_005",
    r"ROCP_010",
    r"ROCP_020",
    r"ROCP_060",
    r"ROCP_120",
    r"HHV_005",
    r"HHV_010",
    r"HHV_020",
    r"HHV_060",
    r"HHV_120",
    r"LLV_005",
    r"LLV_010",
    r"LLV_020",
    r"LLV_060",
    r"LLV_120",
    r"SMA_005",
    r"SMA_010",
    r"SMA_020",
    r"SMA_060",
    r"SMA_120",
    r"STD_005",
    r"STD_010",
    r"STD_020",
    r"STD_060",
    r"STD_120",
)
(
    _x_0,
    ROCP_001,
    ROCP_003,
    ROCP_005,
    ROCP_010,
    ROCP_020,
    ROCP_060,
    ROCP_120,
    HHV_005,
    HHV_010,
    HHV_020,
    HHV_060,
    HHV_120,
    LLV_005,
    LLV_010,
    LLV_020,
    LLV_060,
    LLV_120,
    SMA_005,
    SMA_010,
    SMA_020,
    SMA_060,
    SMA_120,
    STD_005,
    STD_010,
    STD_020,
    STD_060,
    STD_120,
) = (pl.col(i) for i in _)

_DATE_ = "date"
_ASSET_ = "asset"

CS_SW_L1 = pl.col(r"^sw_l1_\d+$")


def func_0_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        _x_0=1 / CLOSE,
    )
    return df


def func_0_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        ROCP_001=ts_returns(CLOSE, 1),
        ROCP_003=ts_returns(CLOSE, 3),
        ROCP_005=ts_returns(CLOSE, 5),
        ROCP_010=ts_returns(CLOSE, 10),
        ROCP_020=ts_returns(CLOSE, 20),
        ROCP_060=ts_returns(CLOSE, 60),
        ROCP_120=ts_returns(CLOSE, 120),
    )
    # ========================================
    df = df.with_columns(
        HHV_005=_x_0 * ts_max(HIGH, 5),
        HHV_010=_x_0 * ts_max(HIGH, 10),
        HHV_020=_x_0 * ts_max(HIGH, 20),
        HHV_060=_x_0 * ts_max(HIGH, 60),
        HHV_120=_x_0 * ts_max(HIGH, 120),
        LLV_005=_x_0 * ts_min(LOW, 5),
        LLV_010=_x_0 * ts_min(LOW, 10),
        LLV_020=_x_0 * ts_min(LOW, 20),
        LLV_060=_x_0 * ts_min(LOW, 60),
        LLV_120=_x_0 * ts_min(LOW, 120),
        SMA_005=_x_0 * ts_mean(CLOSE, 5),
        SMA_010=_x_0 * ts_mean(CLOSE, 10),
        SMA_020=_x_0 * ts_mean(CLOSE, 20),
        SMA_060=_x_0 * ts_mean(CLOSE, 60),
        SMA_120=_x_0 * ts_mean(CLOSE, 120),
        STD_005=_x_0 * ts_std_dev(CLOSE, 5),
        STD_010=_x_0 * ts_std_dev(CLOSE, 10),
        STD_020=_x_0 * ts_std_dev(CLOSE, 20),
        STD_060=_x_0 * ts_std_dev(CLOSE, 60),
        STD_120=_x_0 * ts_std_dev(CLOSE, 120),
    )
    return df


"""
#========================================func_0_cl
_x_0 = 1/CLOSE
#========================================func_0_ts__asset
ROCP_001 = ts_returns(CLOSE, 1)
ROCP_003 = ts_returns(CLOSE, 3)
ROCP_005 = ts_returns(CLOSE, 5)
ROCP_010 = ts_returns(CLOSE, 10)
ROCP_020 = ts_returns(CLOSE, 20)
ROCP_060 = ts_returns(CLOSE, 60)
ROCP_120 = ts_returns(CLOSE, 120)
#========================================func_0_ts__asset
HHV_005 = _x_0*ts_max(HIGH, 5)
HHV_010 = _x_0*ts_max(HIGH, 10)
HHV_020 = _x_0*ts_max(HIGH, 20)
HHV_060 = _x_0*ts_max(HIGH, 60)
HHV_120 = _x_0*ts_max(HIGH, 120)
LLV_005 = _x_0*ts_min(LOW, 5)
LLV_010 = _x_0*ts_min(LOW, 10)
LLV_020 = _x_0*ts_min(LOW, 20)
LLV_060 = _x_0*ts_min(LOW, 60)
LLV_120 = _x_0*ts_min(LOW, 120)
SMA_005 = _x_0*ts_mean(CLOSE, 5)
SMA_010 = _x_0*ts_mean(CLOSE, 10)
SMA_020 = _x_0*ts_mean(CLOSE, 20)
SMA_060 = _x_0*ts_mean(CLOSE, 60)
SMA_120 = _x_0*ts_mean(CLOSE, 120)
STD_005 = _x_0*ts_std_dev(CLOSE, 5)
STD_010 = _x_0*ts_std_dev(CLOSE, 10)
STD_020 = _x_0*ts_std_dev(CLOSE, 20)
STD_060 = _x_0*ts_std_dev(CLOSE, 60)
STD_120 = _x_0*ts_std_dev(CLOSE, 120)
"""

"""
HHV_005 = ts_max(HIGH, 5)/CLOSE
HHV_010 = ts_max(HIGH, 10)/CLOSE
HHV_020 = ts_max(HIGH, 20)/CLOSE
HHV_060 = ts_max(HIGH, 60)/CLOSE
HHV_120 = ts_max(HIGH, 120)/CLOSE
LLV_005 = ts_min(LOW, 5)/CLOSE
LLV_010 = ts_min(LOW, 10)/CLOSE
LLV_020 = ts_min(LOW, 20)/CLOSE
LLV_060 = ts_min(LOW, 60)/CLOSE
LLV_120 = ts_min(LOW, 120)/CLOSE
SMA_005 = ts_mean(CLOSE, 5)/CLOSE
SMA_010 = ts_mean(CLOSE, 10)/CLOSE
SMA_020 = ts_mean(CLOSE, 20)/CLOSE
SMA_060 = ts_mean(CLOSE, 60)/CLOSE
SMA_120 = ts_mean(CLOSE, 120)/CLOSE
STD_005 = ts_std_dev(CLOSE, 5)/CLOSE
STD_010 = ts_std_dev(CLOSE, 10)/CLOSE
STD_020 = ts_std_dev(CLOSE, 20)/CLOSE
STD_060 = ts_std_dev(CLOSE, 60)/CLOSE
STD_120 = ts_std_dev(CLOSE, 120)/CLOSE
ROCP_001 = ts_returns(CLOSE, 1)
ROCP_003 = ts_returns(CLOSE, 3)
ROCP_005 = ts_returns(CLOSE, 5)
ROCP_010 = ts_returns(CLOSE, 10)
ROCP_020 = ts_returns(CLOSE, 20)
ROCP_060 = ts_returns(CLOSE, 60)
ROCP_120 = ts_returns(CLOSE, 120)
"""


def main(df: pl.DataFrame) -> pl.DataFrame:
    # logger.info("start...")

    df = df.sort(by=[_DATE_, _ASSET_])
    df = func_0_cl(df)
    df = df.group_by(_ASSET_).map_groups(func_0_ts__asset)

    # drop intermediate columns
    # df = df.select(pl.exclude(r'^_x_\d+$'))
    df = df.select(~cs.starts_with("_"))

    # shrink
    df = df.select(cs.all().shrink_dtype())
    df = df.shrink_to_fit()

    # logger.info('done')

    # save
    # df.write_parquet('output.parquet', compression='zstd')

    return df


if __name__ in ("__main__", "builtins"):
    # TODO: 数据加载或外部传入
    df_output = main(df_input)
